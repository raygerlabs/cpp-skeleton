name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  APP_NAME: templatepp
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.vm }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
       include:
         - name: linux
           vm: ubuntu-latest
           os: Linux
           arch: x86_64
           compiler: gcc
           compiler_version: 9
           compiler_libcxx: libstdc++11

         - name: macos
           vm: macos-latest
           os: Macos
           arch: x86_64
           compiler: apple-clang
           compiler_version: 13.0
           compiler_libcxx: libc++

         - name: windows
           vm: windows-latest
           os: Windows
           arch: x86_64
           compiler: "Visual Studio"
           compiler_version: 17

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Retrieve current branch name
        id: current_branch
        run: |
          echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/})"

      # For speeding up the build, let's create a cache for conan packages.
      # A new branch will create a copy of the master cache,
      # but the master cache isn't updated until a merge to the master branch.
      - name: Cache Conan
        uses: actions/cache@v2
        with:
          path: ~/.conan
          key: conan-package-cache-${{ steps.current_branch.outputs.name }}
          restore-keys: |
            conan-package-cache-master

      - name: Setup Python environment
        uses: actions/setup-python@v2

      - name: Install linux packages required by SDL
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev libxcb-util-dev libegl-dev

      - name: Install/Upgrade Conan
        shell: bash
        run: |
          pip3 install --upgrade conan
          conan --version
          conan user
          conan profile new --force default
          conan profile update settings.os="${{ matrix.os }}" default
          conan profile update settings.os_build="${{ matrix.os }}" default
          conan profile update settings.arch="${{ matrix.arch }}" default
          conan profile update settings.arch_build="${{ matrix.arch }}" default
          conan profile update settings.compiler="${{ matrix.compiler }}" default
          conan profile update settings.compiler.version="${{ matrix.compiler_version }}" default
          conan profile update settings.compiler.libcxx="${{ matrix.compiler_libcxx }}" default
          conan profile show default

      - name: Remove useless setting for Visual Studio
        shell: bash
        if: matrix.compiler == 'Visual Studio'
        run: conan profile remove settings.compiler.libcxx default

      - name: Export sources
        run: conan source . -sf tmp/source

      - name: Install dependencies
        run: conan install . -if tmp/install -s build_type=${{ env.BUILD_TYPE }} -o with_tests=True -o with_presets=True -pr:b default --build missing

      - name: Run build
        run: conan build . -sf tmp/source -if tmp/install -bf tmp/build

      - name: Package
        run: conan package . -sf tmp/source -if tmp/install -bf tmp/build

      - name: Export package
        run: conan export-pkg . user/channel -sf tmp/source -if tmp/install -bf tmp/build -pr:b default

      - name: Retrieve package version
        id: current_version
        run: echo "::set-output name=value::$(cat ./tmp/build/VERSION)"

      - name: Run integration test
        run: conan test integration ${{ env.APP_NAME }}/${{ steps.current_version.outputs.value }}@user/channel -tbf tmp/test -s build_type=${{ env.BUILD_TYPE }} -pr:b default --build missing

      - name: Retrieve package information
        id: current_package
        shell: bash
        run: |
          echo "::set-output name=name::$(basename "$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ env.APP_NAME }}*.zip" -or -name "${{ env.APP_NAME }}*.tar.gz")")"
          echo "::set-output name=path::$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ env.APP_NAME }}*.zip" -or -name "${{ env.APP_NAME }}*.tar.gz")"

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.current_package.outputs.name }}
          path: ${{ steps.current_package.outputs.path }}
