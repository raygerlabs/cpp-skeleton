name: build
on: 
  pull_request:
  push:
    branches:
      - master

env:
  CONAN_V2_MODE: true
  CONAN_REVISIONS_ENABLED: true
  CONAN_SCM_TO_CONANDATA: true
  CONAN_SYSREQUIRES_MODE: enabled

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
          - name: mac
            os: macos-latest
          - name: windows
            os: windows-latest
    steps:
      - name: Checkout project (${{ matrix.name }})
        uses: actions/checkout@v2

      - name: Setup Python environment (${{ matrix.name }})
        uses: actions/setup-python@v2

      - name: Install conan package manager (${{ matrix.name }})
        run: pip3 install conan

      - name: Retrieve branch name (${{ matrix.name }})
        id: branch_data
        run: echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/})"

      # Retrieve conan packages from the cache,
      # unless something is merged to the master branch
      - name: Cache conan packages (${{ matrix.name }})
        uses: actions/cache@v2
        with:
          path: ~/.conan
          key: conan-package-cache-${{ steps.branch_data.outputs.name }}
          restore-keys: |
            conan-package-cache-master

      - name: Create build directory (${{ matrix.name }})
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Install project dependencies (${{ matrix.name }})
        working-directory: ${{ github.workspace }}/build
        run: conan install .. -pr:b default --build missing

      - name: Build project (${{ matrix.name }})
        working-directory: ${{ github.workspace }}/build
        run: conan build ..

      - name: Package project (${{ matrix.name }})
        working-directory: ${{ github.workspace }}/build
        run: conan package ..

      - name: Retrieve artifact information (${{ matrix.name }})
        working-directory: ${{ github.workspace }}/build
        id: artifact_data
        run: |
          echo "::set-output name=name::$(cat artifact_name.txt)"
          echo "::set-output name=path::$(cat artifact_path.txt)"

      - name: Upload artifact (${{ matrix.name }})
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact_data.outputs.name }}
          path: ${{ steps.artifact_data.outputs.path }}
