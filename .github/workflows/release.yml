name: release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  build-release:
    runs-on: ${{ matrix.vm }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
       include:
         - name: linux
           vm: ubuntu-latest
           os: Linux
           arch: x86_64
           compiler: gcc
           compiler_version: 9
           compiler_libcxx: libstdc++11

         - name: macos
           vm: macos-latest
           os: Macos
           arch: x86_64
           compiler: apple-clang
           compiler_version: 13.0
           compiler_libcxx: libc++

         - name: windows
           vm: windows-latest
           os: Windows
           arch: x86_64
           compiler: "Visual Studio"
           compiler_version: 17

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Retrieve current branch name
        id: current_branch
        run: echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/})"

      # For speeding up the build, let's create a cache for conan packages.
      # A new branch will create a copy of the master cache,
      # but the master cache isn't updated until a merge to the master branch.
      - name: Cache Conan
        uses: actions/cache@v2
        with:
          path: ~/.conan
          key: conan-package-cache-${{ steps.current_branch.outputs.name }}
          restore-keys: |
            conan-package-cache-master

      - name: Setup Python environment
        uses: actions/setup-python@v2

      - name: Install linux packages required by SDL
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev libxcb-util-dev libegl-dev doxygen graphviz texlive-latex-extra

      - name: Install/Upgrade Conan
        run: |
          pip3 install --upgrade conan
          conan --version
          conan user
          conan profile new --force default
          conan profile update settings.os="${{ matrix.os }}" default
          conan profile update settings.os_build="${{ matrix.os }}" default
          conan profile update settings.arch="${{ matrix.arch }}" default
          conan profile update settings.arch_build="${{ matrix.arch }}" default
          conan profile update settings.compiler="${{ matrix.compiler }}" default
          conan profile update settings.compiler.version="${{ matrix.compiler_version }}" default
          conan profile update settings.compiler.libcxx="${{ matrix.compiler_libcxx }}" default
          conan profile show default

      - name: Remove uncompatible conan setting for Visual Studio
        if: matrix.compiler == 'Visual Studio'
        run: conan profile remove settings.compiler.libcxx default

      - name: Install dependencies
        run: conan install ${{ github.workspace }} -if build -s build_type=${{ env.BUILD_TYPE }} -o with_presets=True -o with_tests=True -o with_archive=True -pr:b default --build missing

      - name: Run build
        run: conan build ${{ github.workspace }} -if build -bf build -pf package

      - name: Package
        run: conan package ${{ github.workspace }} -if build -bf build -pf package

      - name: Get project information
        id: current_project
        run: |
          echo "::set-output name=name::$(cat ${{ github.workspace }}/build/NAME)"
          echo "::set-output name=version::$(cat ${{ github.workspace }}/build/VERSION)"

      - name: Remove package from local cache
        run: conan remove ${{ steps.current_project.outputs.name }}/${{ steps.current_project.outputs.version }} -f

      - name: Export package
        run: conan export-pkg ${{ github.workspace }} user/channel -if build -bf build

      - name: Run integration test
        run: conan test ${{ github.workspace }}/integration ${{ steps.current_project.outputs.name }}/${{ steps.current_project.outputs.version }}@user/channel -s build_type=${{ env.BUILD_TYPE }} -tbf ${{ github.workspace }}/build/integration --build missing

      - name: Store package information
        shell: bash
        run: |
          echo "$(basename "$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.zip" -or -name "${{ steps.current_project.outputs.name }}*.tar.gz")")" > package_name.txt
          echo "$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.zip" -or -name "${{ steps.current_project.outputs.name }}*.tar.gz")" > package_path.txt

      - name: Retrieve package information
        id: current_package
        run: |
          echo "::set-output name=name::$(cat package_name.txt)"
          echo "::set-output name=path::$(cat package_path.txt)"

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.current_package.outputs.name }}
          path: ${{ steps.current_package.outputs.path }}

      - name: Upload package information
        uses: actions/upload-artifact@v3
        with:
          name: package_name_${{ matrix.name }}
          path: package_name.txt

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-release
    steps:
      - name: Create a new release
        uses: actions/create-release@v1
        id: current_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ env.BUILD_TYPE }}
          draft: false
          prerelease: false

      - name: Save release information
        run: echo '${{ steps.current_release.outputs.upload_url }}' > upload_url.txt

      - name: Upload release information
        uses: actions/upload-artifact@v2
        with:
          name: upload_url
          path: upload_url.txt

  build-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install documentation tools
        run: sudo apt install -y doxygen graphviz texlive-latex-extra

      - name: Create build environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/build
        run: cmake ${{ github.workspace }} -DBUILD_DOC=TRUE

      - name: Build API documentation
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --target doxydoc pdfdoc

      - name: Get project information
        id: current_project
        run: echo "::set-output name=name::$(cat ${{ github.workspace }}/build/NAME)"

      - name: Get user manual details
        id: user_manual
        shell: bash
        run: |
          echo "::set-output name=name::$(basename "$(find "${{ github.workspace }}/build/doc" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.pdf")")"
          echo "::set-output name=path::$(find "${{ github.workspace }}/build/doc" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.pdf")"

      - name: Download release information
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Load release information
        id: current_release
        run: echo "::set-output name=url::$(cat ${{ github.workspace }}/upload_url.txt)"

      - name: Upload user manual
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.current_release.outputs.url }}
          asset_name: ${{ steps.user_manual.outputs.name }}
          asset_path: ${{ steps.user_manual.outputs.path }}
          asset_content_type: application/pdf

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
          - name: macos
            os: macos-latest
          - name: windows
            os: windows-latest

    steps:
      - name: Download release information
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Download package information
        uses: actions/download-artifact@v2
        with:
          name: package_name_${{ matrix.name }}

      - name: Load release information
        id: current_release
        run: echo "::set-output name=url::$(cat ${{ github.workspace }}/upload_url.txt)"

      - name: Load package information
        id: current_package
        run: echo "::set-output name=name::$(cat ${{ github.workspace }}/package_name.txt)"

      - name: Download release package
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.current_package.outputs.name }}

      - name: Upload release package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.current_release.outputs.url }}
          asset_name: ${{ steps.current_package.outputs.name }}
          asset_path: ${{ github.workspace }}/${{ steps.current_package.outputs.name }}
          asset_content_type: application/octet-stream
