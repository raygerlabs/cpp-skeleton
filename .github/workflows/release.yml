name: release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  build-release:
    runs-on: ${{ matrix.vm }}
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
       include:
         - name: linux
           vm: ubuntu-latest
           os: Linux
           compiler: "gcc"
 
         - name: macos
           vm: macos-latest
           os: Macos
           compiler: "clang"

         - name: windows
           vm: windows-latest
           os: Windows
           compiler: "msvc"

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Retrieve current branch name
        id: current_branch
        run: echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/})"

      - name: Cache Conan
        uses: actions/cache@v2
        with:
          path: ~/.conan
          key: conan-package-cache-${{ steps.current_branch.outputs.name }}
          restore-keys: |
            conan-package-cache-master

      - name: Setup Python environment
        uses: actions/setup-python@v2

      - name: Install linux packages required by coverage
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install lcov

      - name: Install documentation tools
        run: |
          sudo apt install -y doxygen graphviz texlive-latex-extra

      - name: Install/Upgrade Conan
        run: |
          pip3 install --upgrade conan
          conan --version
          conan user
          conan profile new --force default
          conan profile show default

      - name: Install dependencies
        run: conan install ${{ github.workspace }} -of build -s build_type=${{ env.BUILD_TYPE }} -pr:b default --build missing

      - name: Configure
        run: cmake --preset ci-${{ matrix.compiler }} ${{ github.workspace }}

      - name: Build
        run: cmake --build --preset ci-${{ matrix.compiler }} ${{ github.workspace }}

      - name: Testing
        run: ctest --preset ci-${{ matrix.compiler }} ${{ github.workspace }}

      - name: Packaging
        run: cpack ${{ github.workspace }}

      - name: Get project information
        id: current_project
        run: |
          echo "::set-output name=name::$(cat ${{ github.workspace }}/build/NAME)"
          echo "::set-output name=version::$(cat ${{ github.workspace }}/build/VERSION)"

      - name: Store package information
        shell: bash
        run: |
          echo "$(basename "$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.zip" -or -name "${{ steps.current_project.outputs.name }}*.tar.gz")")" > package_name.txt
          echo "$(find "${{ github.workspace }}/build" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.zip" -or -name "${{ steps.current_project.outputs.name }}*.tar.gz")" > package_path.txt

      - name: Retrieve package information
        id: current_package
        run: |
          echo "::set-output name=name::$(cat package_name.txt)"
          echo "::set-output name=path::$(cat package_path.txt)"

      - name: Post code coverage
        if: matrix.name == 'linux'
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/build/coverage.info

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.current_package.outputs.name }}
          path: ${{ steps.current_package.outputs.path }}

      - name: Upload package information
        uses: actions/upload-artifact@v3
        with:
          name: package_name_${{ matrix.name }}
          path: package_name.txt

  upload-release:
    runs-on: ubuntu-latest
    needs:
      - build-release
    steps:
      - name: Create a new release
        uses: actions/create-release@v1
        id: current_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ env.BUILD_TYPE }}
          draft: false
          prerelease: false

      - name: Save release information
        run: echo '${{ steps.current_release.outputs.upload_url }}' > upload_url.txt

      - name: Upload release information
        uses: actions/upload-artifact@v2
        with:
          name: upload_url
          path: upload_url.txt

  upload-doc:
    runs-on: ubuntu-latest
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get project information
        id: current_project
        run: echo "::set-output name=name::$(cat ${{ github.workspace }}/build/NAME)"

      - name: Get user manual details
        id: user_manual
        shell: bash
        run: |
          echo "::set-output name=name::$(basename "$(find "${{ github.workspace }}/build/doc" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.pdf")")"
          echo "::set-output name=path::$(find "${{ github.workspace }}/build/doc" -maxdepth 1 -name "${{ steps.current_project.outputs.name }}*.pdf")"

      - name: Download release information
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Load release information
        id: current_release
        run: echo "::set-output name=url::$(cat ${{ github.workspace }}/upload_url.txt)"

      - name: Upload user manual
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.current_release.outputs.url }}
          asset_name: ${{ steps.user_manual.outputs.name }}
          asset_path: ${{ steps.user_manual.outputs.path }}
          asset_content_type: application/pdf

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
          - name: macos
            os: macos-latest
          - name: windows
            os: windows-latest

    steps:
      - name: Download release information
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Download package information
        uses: actions/download-artifact@v2
        with:
          name: package_name_${{ matrix.name }}

      - name: Load release information
        id: current_release
        run: echo "::set-output name=url::$(cat ${{ github.workspace }}/upload_url.txt)"

      - name: Load package information
        id: current_package
        run: echo "::set-output name=name::$(cat ${{ github.workspace }}/package_name.txt)"

      - name: Download release package
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.current_package.outputs.name }}

      - name: Upload release package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.current_release.outputs.url }}
          asset_name: ${{ steps.current_package.outputs.name }}
          asset_path: ${{ github.workspace }}/${{ steps.current_package.outputs.name }}
          asset_content_type: application/octet-stream
