---
name: ci-cmake
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci-cmake:
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 30

    env:
      WORKING_DIRECTORY: ./imagelib
      BUILD_DIRECTORY: ./imagelib/build/ci
      CONAN_RUN_TESTS: True
      CONAN_V2_MODE: 1
      CONAN_REVISIONS_ENABLED: 1
      CONAN_SCM_TO_CONANDATA: 1

    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", os: windows-latest, cc: "cl", cxx: "cl" }
          - { name: "Ubuntu gcc", os: ubuntu-latest, cc: "gcc", cxx: "g++" }
          - { name: "MacOS clang", os: macos-latest, cc: "clang", cxx: "clang++" }

    steps:
      - name: Checkout current version
        uses: actions/checkout@v4

      - name: Get current branch
        id: get-current-branch
        run: echo "name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT

      - name: Setup Conan cache
        uses: actions/cache@v3
        with:
          path: ~/.conan2/p
          key: conan-package-cache-${{ steps.get-current-branch.outputs.name }}
          restore-keys: |
            conan-package-cache-main

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install CMake, Conan and Ninja
        run: pip3 install cmake conan ninja --upgrade

      - name: Add msbuild to PATH
        if: ${{ runner.os == 'Windows' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Enable Developer Command Prompt
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1.12.1
        with:
          arch: x64
          spectre: true

      - name: Detect Conan environment
        run: conan profile detect -f

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: conan install . -s build_type=Release -b missing

      - name: Perform build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: cmake --workflow --fresh --preset ci

      - name: Get project name
        working-directory: ${{ env.WORKING_DIRECTORY }}
        id: project-name-getter
        shell: bash
        run: |
          echo "PROJECT_NAME=$(cat name.txt)" >> $GITHUB_OUTPUT

      - name: Get package name and path
        id: package-info-getter
        shell: bash
        run: |
          echo "PACKAGE_NAME=$(basename "$(find ${{ env.BUILD_DIRECTORY }} -maxdepth 1 -name "${{ steps.project-name-getter.outputs.PROJECT_NAME }}*.zip" -or -name "${{ steps.project-name-getter.outputs.PROJECT_NAME }}*.tar.gz")")" >> $GITHUB_OUTPUT
          echo "PACKAGE_PATH=$(find ${{ env.BUILD_DIRECTORY }} -maxdepth 1 -name "${{ steps.project-name-getter.outputs.PROJECT_NAME }}*.zip" -or -name "${{ steps.project-name-getter.outputs.PROJECT_NAME }}*.tar.gz")" >> $GITHUB_OUTPUT

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package-info-getter.outputs.PACKAGE_NAME }}
          path: ${{ steps.package-info-getter.outputs.PACKAGE_PATH }}
