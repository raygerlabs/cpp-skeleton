include_guard()

function(check_sanitizer_support sanitizer_name sanitizer_supported)
    set(sanitizer_supported OFF PARENT_SCOPE)
    if (sanitizer_name STREQUAL "address")
        if (NOT MSVC)
            set(sanitizer_supported ON PARENT_SCOPE)
        endif ()
    elseif (sanitizer_name STREQUAL "leak")
        if (UNIX)
            set(sanitizer_supported ON PARENT_SCOPE)
        endif ()
    elseif (sanitizer_name STREQUAL "memory")
        if (APPLE)
            set(sanitizer_supported ON PARENT_SCOPE)
        endif ()
    elseif (sanitizer_name STREQUAL "thread")
        if (NOT MSVC)
            set(sanitizer_supported ON PARENT_SCOPE)
        endif ()
    elseif (sanitizer_name STREQUAL "undefined")
        if (NOT MSVC)
            set(sanitizer_supported ON PARENT_SCOPE)
        endif ()
    endif ()
endfunction()

function(get_sanitizer_flag sanitizer_name enabler_flag)
    set(enabler_flag "" PARENT_SCOPE)
    if (sanitizer_name STREQUAL "address")
        set(enabler_flag "ENABLE_ASAN" PARENT_SCOPE)
    elseif (sanitizer_name STREQUAL "leak")
        set(enabler_flag "ENABLE_LSAN" PARENT_SCOPE)
    elseif (sanitizer_name STREQUAL "memory")
        set(enabler_flag "ENABLE_MSAN" PARENT_SCOPE)
    elseif (sanitizer_name STREQUAL "thread")
        set(enabler_flag "ENABLE_TSAN" PARENT_SCOPE)
    elseif (sanitizer_name STREQUAL "undefined")
        set(enabler_flag "ENABLE_UBSAN" PARENT_SCOPE)
    endif()
endfunction()

function(enable_sanitizer sanitizer_name)
    get_sanitizer_flag(${sanitizer_name} enabler_flag)
    message(STATUS "${enabler_flag} = ${${enabler_flag}}")

    # Convert first character to uppercase
    string(SUBSTRING ${sanitizer_name} 0 1 __first_char)
    string(TOUPPER ${__first_char} __first_char_upper)
    string(SUBSTRING ${sanitizer_name} 1 -1 __rest_of_chars)
    set(sanitizer_name_capped "${__first_char_upper}${__rest_of_chars}")
    
    if (${enabler_flag})
        set(ENABLE_${sanitizer_name_upper})
        check_sanitizer_support(${sanitizer_name} sanitizer_supported)
        if (sanitizer_supported)
            set(sanitizer_flag "-fsanitize=${sanitizer_name}")
            if (MSVC)
                add_compile_options(/D_SANITIZE /Zi /Oy- ${sanitizer_flag})
            else()
                add_compile_options(-D_SANITIZE -g -fno-omit-frame-pointer ${sanitizer_flag})
                add_link_options(${sanitizer_flag})
            endif()
            message(STATUS "${sanitizer_name_capped}Sanitizer ON")
        else ()
            message(WARNING "This compiler ${CMAKE_CXX_COMPILER_ID} does not support ${sanitizer_name_capped}Sanitizer!")
            set(${enabler_flag} OFF GLOBAL_SCOPE)
            message(STATUS "${sanitizer_name_capped}Sanitizer OFF")
        endif ()
    else ()
        message(STATUS "${sanitizer_name_capped}Sanitizer OFF")
    endif ()
endfunction()

foreach (sanitizer IN ITEMS "address" "leak" "memory" "thread" "undefined")
    enable_sanitizer(${sanitizer})
endforeach()
