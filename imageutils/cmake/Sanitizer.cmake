include_guard()

function(__add_sanitizer _FLAG _TARGET)
  if (_TARGET)
    if (TARGET ${_TARGET})
      target_compile_options(${_TARGET} PRIVATE -fsanitize=${_FLAG})
      target_link_options(${_TARGET} PRIVATE -fsanitize=${_FLAG}) 
    else()
      message(FATAL_ERROR "Target ${_TARGET} does not exist for sanitization!")
    endif()
  else()
    add_compile_options(-fsanitize=${_FLAG})
    add_link_options(-fsanitize=${_FLAG})
  endif()
endfunction()

function(enable_sanitizing)
  if (ENABLE_TSAN AND (ENABLE_ASAN OR ENABLE_LSAN OR ENABLE_MSAN OR ENABLE_UBSAN))
    message(FATAL_ERROR "ThreadSanitizer is incompatible with other sanitizers! Please build the code with ThreadSanitizer in isolation!")
  endif()
  if (ENABLE_ASAN)
    __add_sanitizer("address")
  endif()
  if (ENABLE_LSAN)
    __add_sanitizer("leak")
  endif()
  if (ENABLE_MSAN)
    __add_sanitizer("memory")
  endif()
  if (ENABLE_TSAN)
    __add_sanitizer("thread")
  endif()
  if (ENABLE_UBSAN)
    __add_sanitizer("undefined")
  endif()
endfunction()

function(target_enable_sanitizing _target)
  if (ENABLE_TSAN AND (ENABLE_ASAN OR ENABLE_LSAN OR ENABLE_MSAN OR ENABLE_UBSAN))
    message(FATAL_ERROR "ThreadSanitizer is incompatible with other sanitizers! Please build the code with ThreadSanitizer in isolation!")
  endif()
  if (ENABLE_ASAN)
    __add_sanitizer("address" ${_target})
  endif()
  if (ENABLE_LSAN)
    __add_sanitizer("leak" ${_target})
  endif()
  if (ENABLE_MSAN)
    __add_sanitizer("memory" ${_target})
  endif()
  if (ENABLE_TSAN)
    __add_sanitizer("thread" ${_target})
  endif()
  if (ENABLE_UBSAN)
    __add_sanitizer("undefined" ${_target})
  endif()
endfunction()
