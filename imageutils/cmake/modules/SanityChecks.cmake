include_guard(GLOBAL)

include(CheckCXXCompilerFlag)

if (WITH_ASAN)
  if (WITH_TSAN OR WITH_MSAN)
    message(FATAL_ERROR "Address sanitizer is incompatible with thread or memory sanitizer")
  endif(WITH_TSAN OR WITH_MSAN)
  if (MSVC)
    set(ASAN_CXX_FLAGS "/fsanitize=address /Oy- /Zi")
  else()
    set(ASAN_CXX_FLAGS "-fsanitize=address -g -fno-omit-frame-pointer")
  endif()
  set(ASAN_LINKER_FLAGS "-fsanitize=address")
  set(CMAKE_REQUIRED_FLAGS ${ASAN_LINKER_FLAGS})
  check_cxx_compiler_flag("${ASAN_CXX_FLAGS}" HAS_ASAN_CXX_FLAG)
  unset(CMAKE_REQUIRED_FLAGS)
  if (NOT HAS_ASAN_CXX_FLAG)
    message(WARNING "Could not enable address sanitizer")
    message(STATUS "Feature: address sanitizer skipped")
  else (NOT HAS_ASAN_CXX_FLAG)
    add_compile_options(${ASAN_CXX_FLAGS})
    add_link_options(${ASAN_LINKER_FLAGS})
    message(STATUS "Feature: address sanitizer enabled")
  endif (NOT HAS_ASAN_CXX_FLAG)
else (WITH_ASAN)
  message(STATUS "Feature: address sanitizer disabled")
endif (WITH_ASAN)

if (WITH_LSAN)
  if (WITH_TSAN)
    message(FATAL_ERROR "Leak sanitizer is incompatible with thread sanitizer")
  endif (WITH_TSAN)
  set(LSAN_CXX_FLAGS "-fsanitize=leak -g -fno-omit-frame-pointer")
  set(LSAN_LINKER_FLAGS "-fsanitize=leak")
  set(CMAKE_REQUIRED_FLAGS "${LSAN_LINKER_FLAGS}")
  check_cxx_compiler_flag("${LSAN_CXX_FLAGS}" HAS_LSAN_CXX_FLAG)
  unset(CMAKE_REQUIRED_FLAGS)
  if (NOT HAS_LSAN_CXX_FLAG)
    message(WARNING "Could not enable leak sanitizer")
    message(STATUS "Feature: leak sanitizer skipped")
  else (NOT HAS_LSAN_CXX_FLAG)
    add_compile_options(${LSAN_CXX_FLAGS})
    add_link_options(${LSAN_LINKER_FLAGS})
    message(STATUS "Feature: leak sanitizer enabled")
  endif (NOT HAS_LSAN_CXX_FLAG)
else (WITH_LSAN)
  message(STATUS "Feature: leak sanitizer disabled")
endif (WITH_LSAN)

if (WITH_MSAN)
  set(MSAN_CXX_FLAGS "-fsanitize=memory -g -fno-omit-frame-pointer")
  set(MSAN_LINKER_FLAGS "-fsanitize=memory")
  set(CMAKE_REQUIRED_FLAGS "${MSAN_LINKER_FLAGS}")
  check_cxx_compiler_flag("${MSAN_LINKER_FLAGS}" HAS_MSAN_CXX_FLAG)
  unset(CMAKE_REQUIRED_FLAGS)
  if (NOT HAS_MSAN_CXX_FLAG)
    message(WARNING "Could not enable memory sanitizer")
    message(STATUS "Feature: memory sanitizer skipped")
  else()
    add_compile_options(${MSAN_CXX_FLAGS})
    add_link_options(${MSAN_LINKER_FLAGS})
    message(STATUS "Feature: memory sanitizer enabled")
  endif()
else (WITH_MSAN)
  message(STATUS "Feature: memory sanitizer disabled")
endif (WITH_MSAN)

if (WITH_TSAN)
  if (WITH_ASAN OR WITH_LSAN)
    message(FATAL_ERROR "Thread sanitizer is incompatible with address or leak sanitizer")
  endif (WITH_ASAN OR WITH_LSAN)
  set(TSAN_CXX_FLAGS "-fsanitize=thread")
  set(TSAN_LINKER_FLAGS "-fsanitize=thread")
  set(CMAKE_REQUIRED_FLAGS "${TSAN_LINKER_FLAGS}")
  check_cxx_compiler_flag("${TSAN_CXX_FLAGS}" HAS_TSAN_CXX_FLAG)
  unset(CMAKE_REQUIRED_FLAGS)
  if (NOT HAS_TSAN_CXX_FLAG)
    message(WARNING "Could not enable thread sanitizer")
    message(STATUS "Feature: thread sanitizer skipped")
  else()
    add_compile_options(${TSAN_CXX_FLAGS})
    add_link_options(${TSAN_LINKER_FLAGS})
    message(STATUS "Feature: thread sanitizer enabled")
  endif()
else (WITH_TSAN)
  message(STATUS "Feature: thread sanitizer disabled")
endif (WITH_TSAN)

if (WITH_UBSAN)
  set(UBSAN_CXX_FLAGS "-fsanitize=undefined -g -fno-omit-frame-pointer")
  set(UBSAN_LINKER_FLAGS "-fsanitize=undefined")
  set(CMAKE_REQUIRED_FLAGS "${UBSAN_LINKER_FLAGS}")
  check_cxx_compiler_flag("${UBSAN_CXX_FLAGS}" HAS_UBSAN_CXX_FLAG)
  unset(CMAKE_REQUIRED_FLAGS)
  if (NOT HAS_UBSAN_CXX_FLAG)
    message(WARNING "Could not enable undefined behavior sanitizer")
    message(STATUS "Feature: undefined behavior sanitizer skipped")
  else(NOT HAS_UBSAN_CXX_FLAG)
    add_compile_options(${UBSAN_CXX_FLAGS})
    add_link_options(${UBSAN_LINKER_FLAGS})
    message(STATUS "Feature: undefined behavior sanitizer enabled")
  endif(NOT HAS_UBSAN_CXX_FLAG)
else (WITH_UBSAN)
  message(STATUS "Feature: undefined behavior sanitizer disabled")
endif (WITH_UBSAN)
